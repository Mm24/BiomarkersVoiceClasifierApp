
from tflite_support.metadata_writers import audio_classifier
from tflite_support.metadata_writers import metadata_info
from tflite_support.metadata_writers import writer_utils
import pathlib

def convert_model(tflite_model_path, labels="audio_labels.txt", fs=44100):

    AudioClassifierWriter = audio_classifier.MetadataWriter
    _MODEL_PATH = tflite_model_path
    # Task Library expects label files that are in the same format as the one below.
    _LABEL_FILE = labels
    # Expected sampling rate of the input audio buffer.
    _SAMPLE_RATE = fs
    # Expected number of channels of the input audio buffer. Note, Task library only
    # support single channel so far.
    _CHANNELS = 1
    _SAVE_TO_PATH = pathlib.Path(tflite_model_path).without_suffix()+"_metadata.tflite"

    # Create the metadata writer.
    writer = AudioClassifierWriter.create_for_inference(
        writer_utils.load_file(_MODEL_PATH), _SAMPLE_RATE, _CHANNELS, [_LABEL_FILE])

    # Verify the metadata generated by metadata writer.
    print(writer.get_metadata_json())

    # Populate the metadata into the model.
    writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)

if __name__=='__main__':
    convert_model('classificaiton_model.tflite', labels="audio_labels.txt", fs=44100)